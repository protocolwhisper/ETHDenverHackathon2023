import { BytesLike } from '@ethersproject/bytes';
import { Interface, InputValue, JsonAbi } from '@fuel-ts/abi-coder';
import { AbstractScript } from '@fuel-ts/interfaces';
import { BN } from '@fuel-ts/math';
import { FunctionInvocationScope, ScriptRequest, CallOptions, FunctionInvocationResult } from '@fuel-ts/program';
import { Provider } from '@fuel-ts/providers';
import { Account } from '@fuel-ts/wallet';

declare class ScriptInvocationScope<TArgs extends Array<any> = Array<any>, TReturn = any> extends FunctionInvocationScope<TArgs, TReturn> {
    scriptRequest: ScriptRequest<TArgs, TReturn>;
    protected updateScriptRequest(): void;
    private buildScriptRequest;
    /**
     * Submits a script transaction to the blockchain.
     */
    call<T = TReturn>(options?: CallOptions): Promise<FunctionInvocationResult<T>>;
}

type Result<T> = {
    value: T | BN | undefined;
    logs: unknown[];
};
type InvokeMain<TArgs extends Array<any> = Array<any>, TReturn = any> = (...args: TArgs) => ScriptInvocationScope<TArgs, TReturn>;
declare class Script<TInput extends Array<any>, TOutput> extends AbstractScript {
    bytes: Uint8Array;
    interface: Interface;
    account: Account;
    script: ScriptRequest<InputValue<void>[], Result<TOutput>>;
    provider: Provider;
    functions: {
        main: InvokeMain<TInput, TOutput>;
    };
    constructor(bytecode: BytesLike, abi: JsonAbi, account: Account);
}

/**
 * A script that just returns zero
 *
 * Accepts nothing
 * Returns nothing
 *
 * Used for coin transfer transactions
 */
declare const returnZeroScript: ScriptRequest<void, undefined>;

export { Script, returnZeroScript };
