{"version":3,"sources":["../src/script.ts","../src/script-invocation-scope.ts","../src/scripts.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { BytesLike } from '@ethersproject/bytes';\nimport { arrayify } from '@ethersproject/bytes';\nimport { Interface } from '@fuel-ts/abi-coder';\nimport type { InputValue, JsonAbi } from '@fuel-ts/abi-coder';\nimport { AbstractScript } from '@fuel-ts/interfaces';\nimport type { BN } from '@fuel-ts/math';\nimport type { ScriptRequest } from '@fuel-ts/program';\nimport type { Provider } from '@fuel-ts/providers';\nimport type { Account } from '@fuel-ts/wallet';\n\nimport { ScriptInvocationScope } from './script-invocation-scope';\n\ntype Result<T> = {\n  value: T | BN | undefined;\n  logs: unknown[];\n};\n\ntype InvokeMain<TArgs extends Array<any> = Array<any>, TReturn = any> = (\n  ...args: TArgs\n) => ScriptInvocationScope<TArgs, TReturn>;\n\nexport class Script<TInput extends Array<any>, TOutput> extends AbstractScript {\n  bytes: Uint8Array;\n  interface: Interface;\n  account: Account;\n  script!: ScriptRequest<InputValue<void>[], Result<TOutput>>;\n  provider: Provider;\n  functions: { main: InvokeMain<TInput, TOutput> };\n\n  constructor(bytecode: BytesLike, abi: JsonAbi, account: Account) {\n    super();\n    this.bytes = arrayify(bytecode);\n    this.interface = new Interface(abi);\n\n    this.provider = account.provider;\n    this.account = account;\n\n    this.functions = {\n      main: (...args: TInput) =>\n        new ScriptInvocationScope(this, this.interface.getFunction('main'), args),\n    };\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { AbstractScript } from '@fuel-ts/interfaces';\nimport {\n  ScriptRequest,\n  assert,\n  FunctionInvocationScope,\n  FunctionInvocationResult,\n} from '@fuel-ts/program';\nimport type { CallOptions, InvocationScopeLike } from '@fuel-ts/program';\n\nexport class ScriptInvocationScope<\n  TArgs extends Array<any> = Array<any>,\n  TReturn = any\n> extends FunctionInvocationScope<TArgs, TReturn> {\n  scriptRequest!: ScriptRequest<TArgs, TReturn>;\n\n  protected updateScriptRequest() {\n    if (!this.scriptRequest) {\n      this.buildScriptRequest();\n    }\n\n    this.transactionRequest.setScript(this.scriptRequest, this.args);\n  }\n\n  private buildScriptRequest() {\n    this.scriptRequest = new ScriptRequest(\n      (this.program as AbstractScript).bytes,\n      (args: TArgs) => this.program.interface.encodeFunctionData(this.func, args, 0, true),\n      () => [] as unknown as TReturn\n    );\n  }\n\n  /**\n   * Submits a script transaction to the blockchain.\n   */\n  async call<T = TReturn>(options?: CallOptions): Promise<FunctionInvocationResult<T>> {\n    assert(this.program.account, 'Provider is required!');\n\n    const transactionRequest = await this.getTransactionRequest(options);\n    const response = await this.program.account.sendTransaction(transactionRequest);\n\n    return FunctionInvocationResult.build<T>(\n      this as unknown as InvocationScopeLike,\n      response,\n      false,\n      this.program\n    );\n  }\n}\n","import { ScriptRequest } from '@fuel-ts/program';\n\n/**\n * A script that just returns zero\n *\n * Accepts nothing\n * Returns nothing\n *\n * Used for coin transfer transactions\n */\nexport const returnZeroScript = new ScriptRequest(\n  /*\n    Opcode::RET(REG_ZERO)\n    Opcode::NOOP\n  */\n  // TODO: Don't use hardcoded scripts: https://github.com/FuelLabs/fuels-ts/issues/281\n  '0x24000000',\n  () => new Uint8Array(0),\n  () => undefined\n);\n"],"mappings":"AAEA,OAAS,YAAAA,MAAgB,uBACzB,OAAS,aAAAC,MAAiB,qBAE1B,OAAS,kBAAAC,MAAsB,sBCH/B,OACE,iBAAAC,EACA,UAAAC,EACA,2BAAAC,EACA,4BAAAC,MACK,mBAGA,IAAMC,EAAN,cAGGF,CAAwC,CAGtC,qBAAsB,CACzB,KAAK,eACR,KAAK,mBAAmB,EAG1B,KAAK,mBAAmB,UAAU,KAAK,cAAe,KAAK,IAAI,CACjE,CAEQ,oBAAqB,CAC3B,KAAK,cAAgB,IAAIF,EACtB,KAAK,QAA2B,MAChCK,GAAgB,KAAK,QAAQ,UAAU,mBAAmB,KAAK,KAAMA,EAAM,EAAG,EAAI,EACnF,IAAM,CAAC,CACT,CACF,CAKA,MAAM,KAAkBC,EAA6D,CACnFL,EAAO,KAAK,QAAQ,QAAS,uBAAuB,EAEpD,IAAMM,EAAqB,MAAM,KAAK,sBAAsBD,CAAO,EAC7DE,EAAW,MAAM,KAAK,QAAQ,QAAQ,gBAAgBD,CAAkB,EAE9E,OAAOJ,EAAyB,MAC9B,KACAK,EACA,GACA,KAAK,OACP,CACF,CACF,ED1BO,IAAMC,EAAN,cAAyDC,CAAe,CAQ7E,YAAYC,EAAqBC,EAAcC,EAAkB,CAC/D,MAAM,EACN,KAAK,MAAQC,EAASH,CAAQ,EAC9B,KAAK,UAAY,IAAII,EAAUH,CAAG,EAElC,KAAK,SAAWC,EAAQ,SACxB,KAAK,QAAUA,EAEf,KAAK,UAAY,CACf,KAAM,IAAIG,IACR,IAAIC,EAAsB,KAAM,KAAK,UAAU,YAAY,MAAM,EAAGD,CAAI,CAC5E,CACF,CACF,EE3CA,OAAS,iBAAAE,MAAqB,mBAUvB,IAAMC,EAAmB,IAAID,EAMlC,aACA,IAAM,IAAI,WAAW,CAAC,EACtB,IAAG,EACL","names":["arrayify","Interface","AbstractScript","ScriptRequest","assert","FunctionInvocationScope","FunctionInvocationResult","ScriptInvocationScope","args","options","transactionRequest","response","Script","AbstractScript","bytecode","abi","account","arrayify","Interface","args","ScriptInvocationScope","ScriptRequest","returnZeroScript"]}