{"version":3,"sources":["../src/cli.ts","../src/lib/colorizeUserVersion.ts","../src/lib/compareUserVersions.ts","../src/lib/getSupportedVersions.ts","../src/proxies/execSync.ts","../src/lib/getUserVersions.ts","../src/bin.ts"],"sourcesContent":["import { bold, green } from 'chalk';\nimport CliTable from 'cli-table';\n\nimport { colorizeUserVersion } from './lib/colorizeUserVersion';\nimport { compareUserVersions } from './lib/compareUserVersions';\nimport { getSupportedVersions } from './lib/getSupportedVersions';\nimport { getUserVersions } from './lib/getUserVersions';\n\nexport function run() {\n  const { error, info } = console;\n\n  const supportedVersions = getSupportedVersions();\n\n  const cliTable = new CliTable({\n    head: ['', bold('Supported'), bold(`Yours / System`)],\n  });\n\n  const fuelUpLink = green('https://github.com/fuellabs/fuelup');\n\n  const { userForcVersion, userFuelCoreVersion } = getUserVersions({ fuelUpLink });\n\n  const comparisons = compareUserVersions({\n    userForcVersion,\n    userFuelCoreVersion,\n  });\n\n  const userForcColorized = colorizeUserVersion({\n    version: userForcVersion,\n    isGt: comparisons.userForcIsGt,\n    isOk: comparisons.userForcIsEq,\n  });\n\n  const userFuelCoreColorized = colorizeUserVersion({\n    version: userFuelCoreVersion,\n    isGt: comparisons.userFuelCoreIsGt,\n    isOk: comparisons.userFuelCoreIsEq,\n  });\n\n  cliTable.push(['Forc', supportedVersions.FORC, userForcColorized]);\n  cliTable.push(['Fuel-Core', supportedVersions.FUEL_CORE, userFuelCoreColorized]);\n\n  const someIsGt = comparisons.userForcIsGt || comparisons.userFuelCoreIsGt;\n  const bothAreExact = comparisons.userForcIsEq && comparisons.userFuelCoreIsEq;\n\n  if (someIsGt) {\n    info(`Your system's components are newer than the ones supported!`);\n    info(cliTable.toString());\n    process.exit(0);\n  } else if (bothAreExact) {\n    info(`You have all the right versions! ⚡`);\n    info(cliTable.toString());\n    process.exit(0);\n  } else {\n    error(`You're using outdated versions — update them with:`);\n    error(`  ${fuelUpLink}`);\n    error(cliTable.toString());\n    process.exit(1);\n  }\n}\n","import { cyan, green, red } from 'chalk';\n\nexport interface IColorizeUserVersion {\n  version: string;\n  isGt: boolean;\n  isOk: boolean;\n}\n\nexport const colorizeUserVersion = (params: IColorizeUserVersion) => {\n  const { version, isGt, isOk } = params;\n\n  if (isGt) {\n    return cyan(version);\n  }\n\n  if (isOk) {\n    return green(version);\n  }\n\n  return red(version);\n};\n","import semver from 'semver';\n\nimport { getSupportedVersions } from './getSupportedVersions';\n\nexport interface ICompareVersionsParams {\n  userForcVersion: string;\n  userFuelCoreVersion: string;\n}\n\nexport function compareUserVersions(params: ICompareVersionsParams) {\n  const { userForcVersion, userFuelCoreVersion } = params;\n\n  const versions = getSupportedVersions();\n\n  // are user's versions GREATER than the ones supported by the SDK?\n  const userForcIsGt = semver.gt(userForcVersion, versions.FORC);\n  const userFuelCoreIsGt = semver.gt(userFuelCoreVersion, versions.FUEL_CORE);\n\n  // are user's versions EXACTLY the ones supported by the SDK?\n  const userForcIsEq = semver.eq(userForcVersion, versions.FORC);\n  const userFuelCoreIsEq = semver.eq(userFuelCoreVersion, versions.FUEL_CORE);\n\n  return {\n    userForcIsGt,\n    userFuelCoreIsGt,\n    userForcIsEq,\n    userFuelCoreIsEq,\n  };\n}\n","export function thisVersionOrDefault(version?: string | boolean) {\n  if (version !== undefined) {\n    const versionStr = version.toString();\n    if (versionStr !== 'true') {\n      return versionStr;\n    }\n  }\n  return '0.0.0';\n}\n\nexport function getSupportedVersions() {\n  return {\n    FUELS: thisVersionOrDefault(process.env.BUILD_VERSION),\n    FUEL_CORE: thisVersionOrDefault(process.env.FUEL_CORE_VERSION),\n    FORC: thisVersionOrDefault(process.env.FORC_VERSION),\n  };\n}\n","import * as cp from 'child_process';\n\nexport const execSync = cp.execSync;\n","import { execSync } from '../proxies/execSync';\n\nexport function getUserVersions(params: { fuelUpLink: string }) {\n  const { error } = console;\n\n  let userForcVersion: string | undefined;\n  let userFuelCoreVersion: string | undefined;\n\n  try {\n    const reg = /[^0-9.]+/g;\n    userForcVersion = execSync('forc --version').toString().replace(reg, '');\n    userFuelCoreVersion = execSync('fuel-core --version').toString().replace(reg, '');\n  } catch (err) {\n    error('Make sure you have Forc and Fuel-Core installed.');\n    error(`  ${params.fuelUpLink}`);\n    throw err;\n  }\n\n  return {\n    userForcVersion,\n    userFuelCoreVersion,\n  };\n}\n","#!/usr/bin/env node\nimport { run } from './cli';\n\nrun();\n"],"mappings":"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","names":["import_chalk","import_cli_table","import_chalk","colorizeUserVersion","params","version","isGt","isOk","import_semver","thisVersionOrDefault","version","versionStr","getSupportedVersions","compareUserVersions","params","userForcVersion","userFuelCoreVersion","versions","getSupportedVersions","userForcIsGt","semver","userFuelCoreIsGt","userForcIsEq","userFuelCoreIsEq","cp","execSync","getUserVersions","params","error","userForcVersion","userFuelCoreVersion","reg","execSync","err","run","error","info","supportedVersions","getSupportedVersions","cliTable","CliTable","fuelUpLink","userForcVersion","userFuelCoreVersion","getUserVersions","comparisons","compareUserVersions","userForcColorized","colorizeUserVersion","userFuelCoreColorized","someIsGt","bothAreExact","run"]}