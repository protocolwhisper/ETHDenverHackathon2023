import { BytesLike, DataOptions } from '@ethersproject/bytes';
import { Interface, JsonAbi } from '@fuel-ts/abi-coder';
import { Contract } from '@fuel-ts/program';
import { Provider, CreateTransactionRequest, CreateTransactionRequestLike } from '@fuel-ts/providers';
import { StorageSlot } from '@fuel-ts/transactions';
import { Account } from '@fuel-ts/wallet';

type DeployContractOptions = {
    salt?: BytesLike;
    storageSlots?: StorageSlot[];
    stateRoot?: BytesLike;
} & CreateTransactionRequestLike;
declare class ContractFactory {
    bytecode: BytesLike;
    interface: Interface;
    provider: Provider | null;
    account: Account | null;
    constructor(bytecode: BytesLike, abi: JsonAbi | Interface, accountOrProvider?: Account | Provider | null);
    connect(provider: Provider | null): ContractFactory;
    createTransactionRequest(deployContractOptions?: DeployContractOptions): {
        contractId: string;
        transactionRequest: CreateTransactionRequest;
    };
    deployContract(deployContractOptions?: DeployContractOptions): Promise<Contract>;
}

declare const getContractRoot: (bytecode: BytesLike) => string;
declare const getContractStorageRoot: (storageSlots: StorageSlot[]) => string;
declare const getContractId: (bytecode: BytesLike, salt: BytesLike, stateRoot: BytesLike) => string;
declare const includeHexPrefix: (value: string, options?: DataOptions) => string;

declare const util_getContractRoot: typeof getContractRoot;
declare const util_getContractStorageRoot: typeof getContractStorageRoot;
declare const util_getContractId: typeof getContractId;
declare const util_includeHexPrefix: typeof includeHexPrefix;
declare namespace util {
  export {
    util_getContractRoot as getContractRoot,
    util_getContractStorageRoot as getContractStorageRoot,
    util_getContractId as getContractId,
    util_includeHexPrefix as includeHexPrefix,
  };
}

export { ContractFactory, util as ContractUtils };
