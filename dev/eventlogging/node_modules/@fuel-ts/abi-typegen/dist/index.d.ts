interface IRawAbiFunction {
    name: string;
    inputs: IRawAbiFunctionIO[];
    output: IRawAbiFunctionIO;
}
interface IRawAbiFunctionIO {
    name: string;
    type: number;
    typeArguments: null | IRawAbiFunctionIO[];
}

interface IRawAbiTypeRoot {
    type: string;
    typeId: number;
    components: null | IRawAbiTypeComponent[];
    typeParameters: null | number[];
}
interface IRawAbiTypeComponent {
    name: string;
    type: number;
    typeArguments: null | IRawAbiTypeComponent[];
}

interface ITypeAttributes {
    inputLabel: string;
    outputLabel: string;
    structName?: string;
}
interface IType {
    name: string;
    attributes: ITypeAttributes;
    rawAbiType: IRawAbiTypeRoot;
    parseComponentsAttributes(params: {
        types: IType[];
    }): ITypeAttributes;
    getStructName?(): string;
    getStructContents?(params: {
        types: IType[];
    }): string;
}

interface IFunctionAttributes {
    name: string;
    inputs: string;
    output: string;
    prefixedInputs: string;
}
interface IFunction {
    types: IType[];
    rawAbiFunction: IRawAbiFunction;
    attributes: IFunctionAttributes;
    getDeclaration(): string;
}

interface IRawAbi {
    types: IRawAbiTypeRoot[];
    functions: IRawAbiFunction[];
    loggedTypes: unknown[];
}

declare class Abi {
    name: string;
    filepath: string;
    outputDir: string;
    dtsFilepath: string;
    factoryFilepath: string;
    commonTypesInUse: string[];
    rawContents: IRawAbi;
    types: IType[];
    functions: IFunction[];
    constructor(params: {
        filepath: string;
        outputDir: string;
        rawContents: IRawAbi;
    });
    parse(): {
        types: IType[];
        functions: IFunction[];
    };
    getDtsDeclaration(): string;
    getFactoryDeclaration(): string;
    computeCommonTypesInUse(): void;
}

interface IFile {
    path: string;
    contents: string;
}

declare class AbiTypeGen {
    readonly abis: Abi[];
    readonly abiFiles: IFile[];
    readonly outputDir: string;
    readonly files: IFile[];
    constructor(params: {
        abiFiles: IFile[];
        outputDir: string;
    });
    private assembleAllFiles;
}

export { AbiTypeGen };
