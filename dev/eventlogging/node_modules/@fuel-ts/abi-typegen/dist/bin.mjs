#!/usr/bin/env node
import{versions as kt}from"@fuel-ts/versions";import{Command as Pt}from"commander";import{readFileSync as Mt,writeFileSync as Ht}from"fs";import{sync as Xt}from"glob";import Ot from"mkdirp";import{basename as Ut}from"path";import Dt from"rimraf";import{join as _t}from"path";import{versions as Ct}from"@fuel-ts/versions";import{compile as ot}from"handlebars";var pt=`/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: {{FUELS}}
  Forc version: {{FORC}}
  Fuel-Core version: {{FUEL_CORE}}
*/
`;function E(n){let{data:r,template:t}=n,e={strict:!0,noEscape:!0},i=ot(t,e),s=ot(pt,e);return i({...r,header:s(Ct)}).replace(/[\n]{3,}/gm,`

`)}var at=`{{header}}

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from 'fuels';

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "./common";
{{/if}}


{{#each enums}}
export type {{structName}}Input = Enum<{ {{inputValues}} }>;
{{#if recycleRef}}
export type {{structName}}Output = {{structName}}Input;
{{else}}
export type {{structName}}Output = Enum<{ {{outputValues}} }>;
{{/if}}
{{/each}}


{{#each structs}}
export type {{structName}}Input{{typeAnnotations}} = { {{inputValues}} };
{{#if recycleRef}}
export type {{structName}}Output{{typeAnnotations}} = {{structName}}Input{{typeAnnotations}};
{{else}}
export type {{structName}}Output{{typeAnnotations}} = { {{outputValues}} };
{{/if}}
{{/each}}


interface {{capitalizedName}}Interface extends Interface {
  functions: {
    {{#each functionsFragments}}
    {{this}}: FunctionFragment;
    {{/each}}
  };

  {{#each encoders}}
  encodeFunctionData(functionFragment: '{{functionName}}', values: [{{input}}]): Uint8Array;
  {{/each}}

  {{#each decoders}}
  decodeFunctionData(functionFragment: '{{functionName}}', data: BytesLike): DecodedValue;
  {{/each}}
}


export class {{capitalizedName}} extends Contract {
  interface: {{capitalizedName}}Interface;
  functions: {
    {{#each functionsTypedefs}}
    {{this}};
    {{/each}}
  };
}
`;function ct(n){let{name:r,types:t,functions:e,commonTypesInUse:i}=n.abi,s=e.map(c=>c.getDeclaration()),u=e.map(c=>c.attributes.name),a=e.map(c=>({functionName:c.attributes.name,input:c.attributes.inputs})),l=e.map(c=>({functionName:c.attributes.name})),y=t.filter(c=>c.name==="struct").map(c=>{let f=c,A=f.getStructName(),h=f.getStructContents({types:t,target:"input"}),C=f.getStructContents({types:t,target:"output"}),xt=f.getStructDeclaration({types:t});return{structName:A,typeAnnotations:xt,inputValues:h,outputValues:C,recycleRef:h===C}}),b=t.filter(c=>c.name==="enum").map(c=>{let f=c,A=f.getStructName(),h=f.getStructContents({types:t,target:"input"}),C=f.getStructContents({types:t,target:"output"});return{structName:A,inputValues:h,outputValues:C,recycleRef:h===C}});return E({template:at,data:{capitalizedName:r,commonTypesInUse:i.join(", "),functionsTypedefs:s,functionsFragments:u,encoders:a,decoders:l,structs:y,enums:b}})}var ut=`{{header}}

import { Interface, Contract } from "fuels";
import type { Provider, Account, AbstractAddress } from "fuels";
import type { {{capitalizedName}}, {{capitalizedName}}Interface } from "../{{capitalizedName}}";

const _abi = {{abiJsonString}}

export class {{capitalizedName}}__factory {
  static readonly abi = _abi
  static createInterface(): {{capitalizedName}}Interface {
    return new Interface(_abi) as unknown as {{capitalizedName}}Interface
  }
  static connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): {{capitalizedName}} {
    return new Contract(id, _abi, accountOrProvider) as unknown as {{capitalizedName}}
  }
}
`;function mt(n){let{name:r,rawContents:t}=n.abi,e=JSON.stringify(t,null,2);return E({template:ut,data:{capitalizedName:r,abiJsonString:e}})}import St from"lodash.upperfirst";function yt(n){let t=[e=>e.replace(/\s+/g,"-"),e=>e.replace(/\./g,"-"),e=>e.replace(/_/g,"-"),e=>e.replace(/-[a-z]/g,i=>i.slice(-1).toUpperCase()),e=>e.replace(/-/g,""),e=>e.replace(/^\d+/,""),e=>St(e)].reduce((e,i)=>i(e),n);if(t==="")throw new Error(`Can't guess class name, please rename file: ${n}`);return t}function I(n){let{types:r,typeId:t}=n,e=r.find(({rawAbiType:{typeId:i}})=>i===t);if(!e)throw new Error(`Type ID not found: ${t}.`);return e.parseComponentsAttributes({types:r}),e}function d(n){let{types:r,typeArguments:t,parentTypeId:e,target:i}=n,s=`${i}Label`,u=[],a,l;e!==void 0&&(a=I({types:r,typeId:e}),l=a.attributes[s]),t.forEach(b=>{let m,c=b.type;try{m=I({types:r,typeId:c}).attributes[s]}catch{m="void"}if(b.typeArguments){let f=d({types:r,target:i,parentTypeId:b.type,typeArguments:b.typeArguments});u.push(f)}else u.push(`${m}`)});let y=u.join(", ");return l&&(y=`${l}<${y}>`),y}var v=class{constructor(r){this.types=r.types,this.rawAbiFunction=r.rawAbiFunction,this.attributes={name:this.rawAbiFunction.name,inputs:this.bundleInputTypes(),output:this.bundleOutputTypes(),prefixedInputs:this.bundleInputTypes(!0)}}bundleInputTypes(r=!1){let{types:t}=this;return this.rawAbiFunction.inputs.map(i=>{let{name:s,type:u,typeArguments:a}=i,l=I({types:t,typeId:u}),y;return a?y=d({types:t,target:"input",parentTypeId:u,typeArguments:a}):y=l.attributes.inputLabel,r?`${s}: ${y}`:y}).join(", ")}bundleOutputTypes(){return d({types:this.types,target:"output",typeArguments:[this.rawAbiFunction.output]})}getDeclaration(){let{name:r,prefixedInputs:t,output:e}=this.attributes;return`${r}: InvokeFunction<[${t}], ${e}>`}};function lt(n){let{types:r,rawAbiFunction:t}=n;return new v({types:r,rawAbiFunction:t})}function bt(n){let{types:r,rawAbiFunctions:t}=n;return t.map(i=>lt({types:r,rawAbiFunction:i}))}var T=class{constructor(r){this.rawAbiType=r.rawAbiType,this.attributes={inputLabel:"unknown",outputLabel:"unknown"}}};var V=class extends T{constructor(){super(...arguments);this.name="array"}static isSuitableFor(t){return V.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){var b,m;let{types:e}=t,{type:i}=this.rawAbiType,s=Number((b=i.match(V.MATCH_REGEX))==null?void 0:b[1]),u=[],a=[];(m=this.rawAbiType.components)==null||m.forEach(c=>{let{type:f,typeArguments:A}=c;if(A){let h=d({types:e,typeArguments:A,parentTypeId:f,target:"input"}),C=d({types:e,typeArguments:A,parentTypeId:f,target:"output"});u.push(h),a.push(C)}else{let{attributes:h}=I({types:e,typeId:f});u.push(h.inputLabel),a.push(h.outputLabel)}});let l=Array(s).fill(u[0]).join(", "),y=Array(s).fill(a[0]).join(", ");return this.attributes={inputLabel:`[${l}]`,outputLabel:`[${y}]`},this.attributes}},w=V;w.swayType="[_; 2]",w.MATCH_REGEX=/^\[_; ([0-9]+)\]$/m;var q=class extends T{constructor(){super(...arguments);this.name="str"}static isSuitableFor(t){return q.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"string",outputLabel:"string"},this.attributes}},R=q;R.swayType="str[3]",R.MATCH_REGEX=/^str\[(.+)\]$/m;var Y=class extends R{constructor(){super(...arguments);this.name="b256"}static isSuitableFor(t){return Y.MATCH_REGEX.test(t.type)}},x=Y;x.swayType="b256",x.MATCH_REGEX=/^b256$/m;var Q=class extends x{constructor(){super(...arguments);this.name="b512"}static isSuitableFor(t){return Q.MATCH_REGEX.test(t.type)}},L=Q;L.swayType="b512",L.MATCH_REGEX=/^b512$/m;var W=class extends T{constructor(){super(...arguments);this.name="bool"}static isSuitableFor(t){return W.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"boolean",outputLabel:"boolean"},this.attributes}},G=W;G.swayType="bool",G.MATCH_REGEX=/^bool$/m;function _(n){var i;let{rawAbiType:r,regex:t}=n,e=(i=r.type.match(n.regex))==null?void 0:i[1];if(!e){let s=`Couldn't extract struct name with: '${t}'.

`;throw s+=`Check your JSON ABI.

[source]
`,s+=`${JSON.stringify(r,null,2)}`,new Error(s)}return e}var k=class extends T{constructor(){super(...arguments);this.name="enum"}static isSuitableFor(t){let e=k.MATCH_REGEX.test(t.type),i=k.IGNORE_REGEX.test(t.type);return e&&!i}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={structName:e,inputLabel:`${e}Input`,outputLabel:`${e}Output`},this.attributes}getStructName(){return _({rawAbiType:this.rawAbiType,regex:k.MATCH_REGEX})}getStructContents(t){let{types:e,target:i}=t,{components:s}=this.rawAbiType,u=s,a=`${i}Label`;return u.map(y=>{let{name:b,type:m}=y;if(m===0)return`${b}: []`;let{attributes:c}=I({types:e,typeId:m});return`${b}: ${c[a]}`}).join(", ")}},N=k;N.swayType="enum MyEnumName",N.MATCH_REGEX=/^enum (.+)$/m,N.IGNORE_REGEX=/^enum Option$/m;var z=class extends T{constructor(){super(...arguments);this.name="generic"}static isSuitableFor(t){return z.MATCH_REGEX.test(t.type)}getStructName(){return _({rawAbiType:this.rawAbiType,regex:z.MATCH_REGEX})}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={inputLabel:e,outputLabel:e},this.attributes}},M=z;M.swayType="generic T",M.MATCH_REGEX=/^generic ([^\s]+)$/m;var Z=class extends T{constructor(){super(...arguments);this.name="option"}static isSuitableFor(t){return Z.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"Option",outputLabel:"Option"},this.attributes}},H=Z;H.swayType="enum Option",H.MATCH_REGEX=/^enum Option$/m;var tt=class extends T{constructor(t){super(t);this.name="u8";this.attributes={inputLabel:"BigNumberish",outputLabel:"number"}}static isSuitableFor(t){return tt.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes}},g=tt;g.swayType="u8",g.MATCH_REGEX=/^u8$/m;var et=class extends g{constructor(){super(...arguments);this.name="u64"}parseComponentsAttributes(t){return this.attributes={inputLabel:"BigNumberish",outputLabel:"BN"},this.attributes}static isSuitableFor(t){return et.MATCH_REGEX.test(t.type)}},F=et;F.swayType="u64",F.MATCH_REGEX=/^u64$/m;var rt=class extends F{constructor(){super(...arguments);this.name="rawUntypedPtr"}static isSuitableFor(t){return rt.MATCH_REGEX.test(t.type)}},X=rt;X.swayType="raw untyped ptr",X.MATCH_REGEX=/^raw untyped ptr$/m;var P=class extends T{constructor(){super(...arguments);this.name="struct"}static isSuitableFor(t){let e=P.MATCH_REGEX.test(t.type),i=P.IGNORE_REGEX.test(t.type);return e&&!i}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={structName:e,inputLabel:`${e}Input`,outputLabel:`${e}Output`},this.attributes}getStructName(){return _({rawAbiType:this.rawAbiType,regex:P.MATCH_REGEX})}getStructContents(t){let{types:e,target:i}=t,{components:s}=this.rawAbiType;return s.map(l=>{let{name:y,type:b,typeArguments:m}=l,c=I({types:e,typeId:b}),f;if(m)f=d({types:e,target:i,parentTypeId:b,typeArguments:m});else{let A=`${i}Label`;f=c.attributes[A]}return`${y}: ${f}`}).join(", ")}getStructDeclaration(t){let{types:e}=t,{typeParameters:i}=this.rawAbiType;return i?`<${i.map(a=>I({types:e,typeId:a})).map(({attributes:{inputLabel:a}})=>a).join(", ")}>`:""}},$=P;$.swayType="struct MyStruct",$.MATCH_REGEX=/^struct (.+)$/m,$.IGNORE_REGEX=/^struct (Vec|RawVec)$/m;var it=class extends T{constructor(){super(...arguments);this.name="tupple"}static isSuitableFor(t){return it.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){var u;let{types:e}=t,i=[],s=[];return(u=this.rawAbiType.components)==null||u.forEach(a=>{let{type:l,typeArguments:y}=a;if(y){let b=d({types:e,typeArguments:y,parentTypeId:l,target:"input"}),m=d({types:e,typeArguments:y,parentTypeId:l,target:"output"});i.push(b),s.push(m)}else{let{attributes:b}=I({types:e,typeId:l});i.push(b.inputLabel),s.push(b.outputLabel)}}),this.attributes={inputLabel:`[${i.join(", ")}]`,outputLabel:`[${s.join(", ")}]`},this.attributes}},O=it;O.swayType="(_, _, _)",O.MATCH_REGEX=/^\([_,\s]+\)$/m;var nt=class extends g{constructor(){super(...arguments);this.name="u16"}static isSuitableFor(t){return nt.MATCH_REGEX.test(t.type)}},U=nt;U.swayType="u16",U.MATCH_REGEX=/^u16$/m;var st=class extends g{constructor(){super(...arguments);this.name="u32"}static isSuitableFor(t){return st.MATCH_REGEX.test(t.type)}},D=st;D.swayType="u32",D.MATCH_REGEX=/^u32$/m;var j=class extends w{constructor(){super(...arguments);this.name="vector"}static isSuitableFor(t){let e=j.MATCH_REGEX.test(t.type),i=j.IGNORE_REGEX.test(t.type);return e&&!i}parseComponentsAttributes(t){return this.attributes={inputLabel:"Vec",outputLabel:"Vec"},this.attributes}},S=j;S.swayType="struct Vec",S.MATCH_REGEX=/^struct Vec/m,S.IGNORE_REGEX=/^struct RawVec$/m;var ft=[w,x,L,G,N,M,H,X,R,$,O,U,D,F,g,S];function Tt(n){let{rawAbiType:r}=n,{type:t}=r,e=ft.find(i=>i.isSuitableFor({type:t}));if(!e)throw new Error(`Type not supported: ${t}`);return new e(n)}function It(n){return["()","struct RawVec"].indexOf(n.type)>=0}function dt(n){let r=[];return n.rawAbiTypes.forEach(t=>{let{type:e}=t;if(!It({type:e})){let s=Tt({rawAbiType:t});r.push(s)}}),r.forEach(t=>{t.parseComponentsAttributes({types:r})}),r}var B=class{constructor(r){this.commonTypesInUse=[];let{filepath:t,outputDir:e,rawContents:i}=r,s=/([^/]+)-abi\.json$/m,u=t.match(s);if(!u||u.length===0)throw new Error(`Could not parse name from abi file: ${t}`);let a=`${yt(u[1])}Abi`;this.dtsFilepath=`${e}/${a}.d.ts`,this.factoryFilepath=`${e}/factories/${a}__factory.ts`,this.name=a,this.filepath=t,this.rawContents=i,this.outputDir=e;let{types:l,functions:y}=this.parse();this.types=l,this.functions=y,this.computeCommonTypesInUse()}parse(){let{types:r,functions:t}=this.rawContents,e=dt({rawAbiTypes:r}),i=bt({rawAbiFunctions:t,types:e});return{types:e,functions:i}}getDtsDeclaration(){return ct({abi:this})}getFactoryDeclaration(){return mt({abi:this})}computeCommonTypesInUse(){let r={option:"Option",enum:"Enum",vector:"Vec"};this.commonTypesInUse=[],Object.keys(r).forEach(t=>{if(!!this.types.find(i=>i.name===t)){let i=r[t];this.commonTypesInUse.push(i)}})}};var gt=`{{header}}

/*
  Mimics Sway Enum, requires at least one Key-Value but
  does not raise error on multiple pairs.
  This is done in the abi-coder
*/
export type Enum<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

/*
  Mimics Sway Option and Vectors.
  Vectors are treated like arrays in Typescript.
*/
export type Option<T> = T | undefined;

export type Vec<T> = T[];
`;function ht(){return E({template:gt})}var At=`{{header}}

{{#each abiCapitalizedNames}}
export type { {{this}} } from './{{this}}';
{{/each}}

{{#each abiCapitalizedNames}}
export { {{this}}__factory } from './factories/{{this}}__factory';
{{/each}}
`;function Et(n){let r=n.abis.map(({name:e})=>e);return E({template:At,data:{abiCapitalizedNames:r}})}var J=class{constructor(r){let{abiFiles:t,outputDir:e}=r;this.files=[],this.outputDir=e,this.abiFiles=t,this.abis=this.abiFiles.map(i=>new B({filepath:i.path,rawContents:JSON.parse(i.contents),outputDir:e})),this.assembleAllFiles()}assembleAllFiles(){let r=this.abis.find(e=>e.commonTypesInUse.length>0);this.abis.forEach(e=>{let i={path:e.dtsFilepath,contents:e.getDtsDeclaration()},s={path:e.factoryFilepath,contents:e.getFactoryDeclaration()};this.files.push(i),this.files.push(s)});let t={path:`${this.outputDir}/index.ts`,contents:Et({abis:this.abis})};if(this.files.push(t),r){let i={path:_t(this.outputDir,"common.d.ts"),contents:ht()};this.files.push(i)}}};function wt(n){let{cwd:r,inputs:t,output:e,silent:i,filepaths:s}=n,u=Ut(r),{log:a}=console;i&&(a=()=>({}));let l=[];if(!(s!=null&&s.length)&&(t==null?void 0:t.length))l=t.flatMap(m=>Xt(m,{cwd:r}));else if(s!=null&&s.length)l=s;else throw new Error("You need to inform at least one parameter: `input` or `filepaths`");let y=l.map(m=>({path:m,contents:Mt(m,"utf-8")})),b=new J({outputDir:e,abiFiles:y});a(`Generating files..
`),Ot.sync(`${e}/factories`),b.files.forEach(m=>{Dt.sync(m.path),Ht(m.path,m.contents);let c=new RegExp(`^.+${u}/`,"m");a(` - ${m.path.replace(c,"")}`)}),a(`
Done.\u26A1`)}function vt(n){let r=process.cwd(),{inputs:t,output:e,silent:i}=n;wt({cwd:r,inputs:t,output:e,silent:!!i})}function Vt(n){n.requiredOption("-i, --inputs <path|glob...>","input paths/globals to your abi json files").requiredOption("-o, --output <dir>","directory path for generated files").option("-s, --silent","omit output messages").action(vt)}function Rt(n){let r=new Pt,{argv:t,programName:e}=n;r.name(e),r.version(kt.FUELS),r.usage("-i ../out/*-abi.json -o ./generated/"),Vt(r),r.parse(t)}Rt({argv:process.argv,programName:"fuels-typegen"});
//# sourceMappingURL=bin.mjs.map