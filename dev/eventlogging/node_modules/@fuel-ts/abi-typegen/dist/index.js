"use strict";var Nt=Object.create;var V=Object.defineProperty;var $t=Object.getOwnPropertyDescriptor;var Lt=Object.getOwnPropertyNames;var St=Object.getPrototypeOf,_t=Object.prototype.hasOwnProperty;var Gt=(s,r)=>{for(var t in r)V(s,t,{get:r[t],enumerable:!0})},ot=(s,r,t,e)=>{if(r&&typeof r=="object"||typeof r=="function")for(let i of Lt(r))!_t.call(s,i)&&i!==t&&V(s,i,{get:()=>r[i],enumerable:!(e=$t(r,i))||e.enumerable});return s};var Mt=(s,r,t)=>(t=s!=null?Nt(St(s)):{},ot(r||!s||!s.__esModule?V(t,"default",{value:s,enumerable:!0}):t,s)),Ht=s=>ot(V({},"__esModule",{value:!0}),s);var Vt={};Gt(Vt,{AbiTypeGen:()=>pt});module.exports=Ht(Vt);var Ft=require("path");var ct=require("@fuel-ts/versions"),J=require("handlebars");var at=`/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: {{FUELS}}
  Forc version: {{FORC}}
  Fuel-Core version: {{FUEL_CORE}}
*/
`;function g(s){let{data:r,template:t}=s,e={strict:!0,noEscape:!0},i=(0,J.compile)(t,e),p=(0,J.compile)(at,e);return i({...r,header:p(ct.versions)}).replace(/[\n]{3,}/gm,`

`)}var ut=`{{header}}

import type {
  Interface,
  FunctionFragment,
  DecodedValue,
  Contract,
  BytesLike,
  BigNumberish,
  InvokeFunction,
  BN,
} from 'fuels';

{{#if commonTypesInUse}}
import type { {{commonTypesInUse}} } from "./common";
{{/if}}


{{#each enums}}
export type {{structName}}Input = Enum<{ {{inputValues}} }>;
{{#if recycleRef}}
export type {{structName}}Output = {{structName}}Input;
{{else}}
export type {{structName}}Output = Enum<{ {{outputValues}} }>;
{{/if}}
{{/each}}


{{#each structs}}
export type {{structName}}Input{{typeAnnotations}} = { {{inputValues}} };
{{#if recycleRef}}
export type {{structName}}Output{{typeAnnotations}} = {{structName}}Input{{typeAnnotations}};
{{else}}
export type {{structName}}Output{{typeAnnotations}} = { {{outputValues}} };
{{/if}}
{{/each}}


interface {{capitalizedName}}Interface extends Interface {
  functions: {
    {{#each functionsFragments}}
    {{this}}: FunctionFragment;
    {{/each}}
  };

  {{#each encoders}}
  encodeFunctionData(functionFragment: '{{functionName}}', values: [{{input}}]): Uint8Array;
  {{/each}}

  {{#each decoders}}
  decodeFunctionData(functionFragment: '{{functionName}}', data: BytesLike): DecodedValue;
  {{/each}}
}


export class {{capitalizedName}} extends Contract {
  interface: {{capitalizedName}}Interface;
  functions: {
    {{#each functionsTypedefs}}
    {{this}};
    {{/each}}
  };
}
`;function mt(s){let{name:r,types:t,functions:e,commonTypesInUse:i}=s.abi,p=e.map(c=>c.getDeclaration()),o=e.map(c=>c.attributes.name),a=e.map(c=>({functionName:c.attributes.name,input:c.attributes.inputs})),b=e.map(c=>({functionName:c.attributes.name})),u=t.filter(c=>c.name==="struct").map(c=>{let y=c,h=y.getStructName(),A=y.getStructContents({types:t,target:"input"}),F=y.getStructContents({types:t,target:"output"}),Ct=y.getStructDeclaration({types:t});return{structName:h,typeAnnotations:Ct,inputValues:A,outputValues:F,recycleRef:A===F}}),m=t.filter(c=>c.name==="enum").map(c=>{let y=c,h=y.getStructName(),A=y.getStructContents({types:t,target:"input"}),F=y.getStructContents({types:t,target:"output"});return{structName:h,inputValues:A,outputValues:F,recycleRef:A===F}});return g({template:ut,data:{capitalizedName:r,commonTypesInUse:i.join(", "),functionsTypedefs:p,functionsFragments:o,encoders:a,decoders:b,structs:u,enums:m}})}var yt=`{{header}}

import { Interface, Contract } from "fuels";
import type { Provider, Account, AbstractAddress } from "fuels";
import type { {{capitalizedName}}, {{capitalizedName}}Interface } from "../{{capitalizedName}}";

const _abi = {{abiJsonString}}

export class {{capitalizedName}}__factory {
  static readonly abi = _abi
  static createInterface(): {{capitalizedName}}Interface {
    return new Interface(_abi) as unknown as {{capitalizedName}}Interface
  }
  static connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): {{capitalizedName}} {
    return new Contract(id, _abi, accountOrProvider) as unknown as {{capitalizedName}}
  }
}
`;function lt(s){let{name:r,rawContents:t}=s.abi,e=JSON.stringify(t,null,2);return g({template:yt,data:{capitalizedName:r,abiJsonString:e}})}var bt=Mt(require("lodash.upperfirst"));function ft(s){let t=[e=>e.replace(/\s+/g,"-"),e=>e.replace(/\./g,"-"),e=>e.replace(/_/g,"-"),e=>e.replace(/-[a-z]/g,i=>i.slice(-1).toUpperCase()),e=>e.replace(/-/g,""),e=>e.replace(/^\d+/,""),e=>(0,bt.default)(e)].reduce((e,i)=>i(e),s);if(t==="")throw new Error(`Can't guess class name, please rename file: ${s}`);return t}function T(s){let{types:r,typeId:t}=s,e=r.find(({rawAbiType:{typeId:i}})=>i===t);if(!e)throw new Error(`Type ID not found: ${t}.`);return e.parseComponentsAttributes({types:r}),e}function I(s){let{types:r,typeArguments:t,parentTypeId:e,target:i}=s,p=`${i}Label`,o=[],a,b;e!==void 0&&(a=T({types:r,typeId:e}),b=a.attributes[p]),t.forEach(m=>{let f,c=m.type;try{f=T({types:r,typeId:c}).attributes[p]}catch{f="void"}if(m.typeArguments){let y=I({types:r,target:i,parentTypeId:m.type,typeArguments:m.typeArguments});o.push(y)}else o.push(`${f}`)});let u=o.join(", ");return b&&(u=`${b}<${u}>`),u}var z=class{constructor(r){this.types=r.types,this.rawAbiFunction=r.rawAbiFunction,this.attributes={name:this.rawAbiFunction.name,inputs:this.bundleInputTypes(),output:this.bundleOutputTypes(),prefixedInputs:this.bundleInputTypes(!0)}}bundleInputTypes(r=!1){let{types:t}=this;return this.rawAbiFunction.inputs.map(i=>{let{name:p,type:o,typeArguments:a}=i,b=T({types:t,typeId:o}),u;return a?u=I({types:t,target:"input",parentTypeId:o,typeArguments:a}):u=b.attributes.inputLabel,r?`${p}: ${u}`:u}).join(", ")}bundleOutputTypes(){return I({types:this.types,target:"output",typeArguments:[this.rawAbiFunction.output]})}getDeclaration(){let{name:r,prefixedInputs:t,output:e}=this.attributes;return`${r}: InvokeFunction<[${t}], ${e}>`}};function Tt(s){let{types:r,rawAbiFunction:t}=s;return new z({types:r,rawAbiFunction:t})}function It(s){let{types:r,rawAbiFunctions:t}=s;return t.map(i=>Tt({types:r,rawAbiFunction:i}))}var l=class{constructor(r){this.rawAbiType=r.rawAbiType,this.attributes={inputLabel:"unknown",outputLabel:"unknown"}}};var P=class extends l{constructor(){super(...arguments);this.name="array"}static isSuitableFor(t){return P.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){var m,f;let{types:e}=t,{type:i}=this.rawAbiType,p=Number((m=i.match(P.MATCH_REGEX))==null?void 0:m[1]),o=[],a=[];(f=this.rawAbiType.components)==null||f.forEach(c=>{let{type:y,typeArguments:h}=c;if(h){let A=I({types:e,typeArguments:h,parentTypeId:y,target:"input"}),F=I({types:e,typeArguments:h,parentTypeId:y,target:"output"});o.push(A),a.push(F)}else{let{attributes:A}=T({types:e,typeId:y});o.push(A.inputLabel),a.push(A.outputLabel)}});let b=Array(p).fill(o[0]).join(", "),u=Array(p).fill(a[0]).join(", ");return this.attributes={inputLabel:`[${b}]`,outputLabel:`[${u}]`},this.attributes}},E=P;E.swayType="[_; 2]",E.MATCH_REGEX=/^\[_; ([0-9]+)\]$/m;var q=class extends l{constructor(){super(...arguments);this.name="str"}static isSuitableFor(t){return q.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"string",outputLabel:"string"},this.attributes}},R=q;R.swayType="str[3]",R.MATCH_REGEX=/^str\[(.+)\]$/m;var Q=class extends R{constructor(){super(...arguments);this.name="b256"}static isSuitableFor(t){return Q.MATCH_REGEX.test(t.type)}},w=Q;w.swayType="b256",w.MATCH_REGEX=/^b256$/m;var W=class extends w{constructor(){super(...arguments);this.name="b512"}static isSuitableFor(t){return W.MATCH_REGEX.test(t.type)}},L=W;L.swayType="b512",L.MATCH_REGEX=/^b512$/m;var Y=class extends l{constructor(){super(...arguments);this.name="bool"}static isSuitableFor(t){return Y.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"boolean",outputLabel:"boolean"},this.attributes}},S=Y;S.swayType="bool",S.MATCH_REGEX=/^bool$/m;function _(s){var i;let{rawAbiType:r,regex:t}=s,e=(i=r.type.match(s.regex))==null?void 0:i[1];if(!e){let p=`Couldn't extract struct name with: '${t}'.

`;throw p+=`Check your JSON ABI.

[source]
`,p+=`${JSON.stringify(r,null,2)}`,new Error(p)}return e}var D=class extends l{constructor(){super(...arguments);this.name="enum"}static isSuitableFor(t){let e=D.MATCH_REGEX.test(t.type),i=D.IGNORE_REGEX.test(t.type);return e&&!i}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={structName:e,inputLabel:`${e}Input`,outputLabel:`${e}Output`},this.attributes}getStructName(){return _({rawAbiType:this.rawAbiType,regex:D.MATCH_REGEX})}getStructContents(t){let{types:e,target:i}=t,{components:p}=this.rawAbiType,o=p,a=`${i}Label`;return o.map(u=>{let{name:m,type:f}=u;if(f===0)return`${m}: []`;let{attributes:c}=T({types:e,typeId:f});return`${m}: ${c[a]}`}).join(", ")}},C=D;C.swayType="enum MyEnumName",C.MATCH_REGEX=/^enum (.+)$/m,C.IGNORE_REGEX=/^enum Option$/m;var v=class extends l{constructor(){super(...arguments);this.name="generic"}static isSuitableFor(t){return v.MATCH_REGEX.test(t.type)}getStructName(){return _({rawAbiType:this.rawAbiType,regex:v.MATCH_REGEX})}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={inputLabel:e,outputLabel:e},this.attributes}},G=v;G.swayType="generic T",G.MATCH_REGEX=/^generic ([^\s]+)$/m;var Z=class extends l{constructor(){super(...arguments);this.name="option"}static isSuitableFor(t){return Z.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes={inputLabel:"Option",outputLabel:"Option"},this.attributes}},M=Z;M.swayType="enum Option",M.MATCH_REGEX=/^enum Option$/m;var tt=class extends l{constructor(t){super(t);this.name="u8";this.attributes={inputLabel:"BigNumberish",outputLabel:"number"}}static isSuitableFor(t){return tt.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){return this.attributes}},d=tt;d.swayType="u8",d.MATCH_REGEX=/^u8$/m;var et=class extends d{constructor(){super(...arguments);this.name="u64"}parseComponentsAttributes(t){return this.attributes={inputLabel:"BigNumberish",outputLabel:"BN"},this.attributes}static isSuitableFor(t){return et.MATCH_REGEX.test(t.type)}},x=et;x.swayType="u64",x.MATCH_REGEX=/^u64$/m;var rt=class extends x{constructor(){super(...arguments);this.name="rawUntypedPtr"}static isSuitableFor(t){return rt.MATCH_REGEX.test(t.type)}},H=rt;H.swayType="raw untyped ptr",H.MATCH_REGEX=/^raw untyped ptr$/m;var k=class extends l{constructor(){super(...arguments);this.name="struct"}static isSuitableFor(t){let e=k.MATCH_REGEX.test(t.type),i=k.IGNORE_REGEX.test(t.type);return e&&!i}parseComponentsAttributes(t){let e=this.getStructName();return this.attributes={structName:e,inputLabel:`${e}Input`,outputLabel:`${e}Output`},this.attributes}getStructName(){return _({rawAbiType:this.rawAbiType,regex:k.MATCH_REGEX})}getStructContents(t){let{types:e,target:i}=t,{components:p}=this.rawAbiType;return p.map(b=>{let{name:u,type:m,typeArguments:f}=b,c=T({types:e,typeId:m}),y;if(f)y=I({types:e,target:i,parentTypeId:m,typeArguments:f});else{let h=`${i}Label`;y=c.attributes[h]}return`${u}: ${y}`}).join(", ")}getStructDeclaration(t){let{types:e}=t,{typeParameters:i}=this.rawAbiType;return i?`<${i.map(a=>T({types:e,typeId:a})).map(({attributes:{inputLabel:a}})=>a).join(", ")}>`:""}},N=k;N.swayType="struct MyStruct",N.MATCH_REGEX=/^struct (.+)$/m,N.IGNORE_REGEX=/^struct (Vec|RawVec)$/m;var it=class extends l{constructor(){super(...arguments);this.name="tupple"}static isSuitableFor(t){return it.MATCH_REGEX.test(t.type)}parseComponentsAttributes(t){var o;let{types:e}=t,i=[],p=[];return(o=this.rawAbiType.components)==null||o.forEach(a=>{let{type:b,typeArguments:u}=a;if(u){let m=I({types:e,typeArguments:u,parentTypeId:b,target:"input"}),f=I({types:e,typeArguments:u,parentTypeId:b,target:"output"});i.push(m),p.push(f)}else{let{attributes:m}=T({types:e,typeId:b});i.push(m.inputLabel),p.push(m.outputLabel)}}),this.attributes={inputLabel:`[${i.join(", ")}]`,outputLabel:`[${p.join(", ")}]`},this.attributes}},X=it;X.swayType="(_, _, _)",X.MATCH_REGEX=/^\([_,\s]+\)$/m;var st=class extends d{constructor(){super(...arguments);this.name="u16"}static isSuitableFor(t){return st.MATCH_REGEX.test(t.type)}},O=st;O.swayType="u16",O.MATCH_REGEX=/^u16$/m;var nt=class extends d{constructor(){super(...arguments);this.name="u32"}static isSuitableFor(t){return nt.MATCH_REGEX.test(t.type)}},U=nt;U.swayType="u32",U.MATCH_REGEX=/^u32$/m;var j=class extends E{constructor(){super(...arguments);this.name="vector"}static isSuitableFor(t){let e=j.MATCH_REGEX.test(t.type),i=j.IGNORE_REGEX.test(t.type);return e&&!i}parseComponentsAttributes(t){return this.attributes={inputLabel:"Vec",outputLabel:"Vec"},this.attributes}},$=j;$.swayType="struct Vec",$.MATCH_REGEX=/^struct Vec/m,$.IGNORE_REGEX=/^struct RawVec$/m;var dt=[E,w,L,S,C,G,M,H,R,N,X,O,U,x,d,$];function At(s){let{rawAbiType:r}=s,{type:t}=r,e=dt.find(i=>i.isSuitableFor({type:t}));if(!e)throw new Error(`Type not supported: ${t}`);return new e(s)}function ht(s){return["()","struct RawVec"].indexOf(s.type)>=0}function gt(s){let r=[];return s.rawAbiTypes.forEach(t=>{let{type:e}=t;if(!ht({type:e})){let p=At({rawAbiType:t});r.push(p)}}),r.forEach(t=>{t.parseComponentsAttributes({types:r})}),r}var B=class{constructor(r){this.commonTypesInUse=[];let{filepath:t,outputDir:e,rawContents:i}=r,p=/([^/]+)-abi\.json$/m,o=t.match(p);if(!o||o.length===0)throw new Error(`Could not parse name from abi file: ${t}`);let a=`${ft(o[1])}Abi`;this.dtsFilepath=`${e}/${a}.d.ts`,this.factoryFilepath=`${e}/factories/${a}__factory.ts`,this.name=a,this.filepath=t,this.rawContents=i,this.outputDir=e;let{types:b,functions:u}=this.parse();this.types=b,this.functions=u,this.computeCommonTypesInUse()}parse(){let{types:r,functions:t}=this.rawContents,e=gt({rawAbiTypes:r}),i=It({rawAbiFunctions:t,types:e});return{types:e,functions:i}}getDtsDeclaration(){return mt({abi:this})}getFactoryDeclaration(){return lt({abi:this})}computeCommonTypesInUse(){let r={option:"Option",enum:"Enum",vector:"Vec"};this.commonTypesInUse=[],Object.keys(r).forEach(t=>{if(!!this.types.find(i=>i.name===t)){let i=r[t];this.commonTypesInUse.push(i)}})}};var Et=`{{header}}

/*
  Mimics Sway Enum, requires at least one Key-Value but
  does not raise error on multiple pairs.
  This is done in the abi-coder
*/
export type Enum<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

/*
  Mimics Sway Option and Vectors.
  Vectors are treated like arrays in Typescript.
*/
export type Option<T> = T | undefined;

export type Vec<T> = T[];
`;function Rt(){return g({template:Et})}var wt=`{{header}}

{{#each abiCapitalizedNames}}
export type { {{this}} } from './{{this}}';
{{/each}}

{{#each abiCapitalizedNames}}
export { {{this}}__factory } from './factories/{{this}}__factory';
{{/each}}
`;function xt(s){let r=s.abis.map(({name:e})=>e);return g({template:wt,data:{abiCapitalizedNames:r}})}var pt=class{constructor(r){let{abiFiles:t,outputDir:e}=r;this.files=[],this.outputDir=e,this.abiFiles=t,this.abis=this.abiFiles.map(i=>new B({filepath:i.path,rawContents:JSON.parse(i.contents),outputDir:e})),this.assembleAllFiles()}assembleAllFiles(){let r=this.abis.find(e=>e.commonTypesInUse.length>0);this.abis.forEach(e=>{let i={path:e.dtsFilepath,contents:e.getDtsDeclaration()},p={path:e.factoryFilepath,contents:e.getFactoryDeclaration()};this.files.push(i),this.files.push(p)});let t={path:`${this.outputDir}/index.ts`,contents:xt({abis:this.abis})};if(this.files.push(t),r){let i={path:(0,Ft.join)(this.outputDir,"common.d.ts"),contents:Rt()};this.files.push(i)}}};0&&(module.exports={AbiTypeGen});
//# sourceMappingURL=index.js.map