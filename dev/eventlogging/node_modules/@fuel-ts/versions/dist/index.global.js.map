{"version":3,"sources":["../src/lib/getSupportedVersions.ts","../src/index.ts"],"sourcesContent":["export function thisVersionOrDefault(version?: string | boolean) {\n  if (version !== undefined) {\n    const versionStr = version.toString();\n    if (versionStr !== 'true') {\n      return versionStr;\n    }\n  }\n  return '0.0.0';\n}\n\nexport function getSupportedVersions() {\n  return {\n    FUELS: thisVersionOrDefault(process.env.BUILD_VERSION),\n    FUEL_CORE: thisVersionOrDefault(process.env.FUEL_CORE_VERSION),\n    FORC: thisVersionOrDefault(process.env.FORC_VERSION),\n  };\n}\n","/*\n  Variables:\n    `FUELS` — comes from `/packages/fuels/package.json`\n    `FUEL_CORE` — comes from `/services/fuel-core/Dockerfile`\n    `FORC` — comes from `/packages/forc-bin/package.json`\n\n  The CI release routine reads the aforementioned files,\n  and set all the variables prior to building the packages.\n\n  Take a look at the /.github/workflows/release` file.\n\n  The TSUP build then replaces all `process.env.<VAR_NAME>`\n  entries bellow with their respective values from the env.\n\n  If no env variables are set, the expression `!0` seems to be\n  used by TSUP, which then results to `true`. For this reason,\n  we check for it and use default values instead.\n*/\n\nimport { getSupportedVersions } from './lib/getSupportedVersions';\n\nexport const versions = getSupportedVersions();\n"],"mappings":"mBAAO,SAASA,EAAqBC,EAA4B,CAC/D,GAAIA,IAAY,OAAW,CACzB,IAAMC,EAAaD,EAAQ,SAAS,EACpC,GAAIC,IAAe,OACjB,OAAOA,CAEX,CACA,MAAO,OACT,CAEO,SAASC,GAAuB,CACrC,MAAO,CACL,MAAOH,EAAqB,QAAyB,EACrD,UAAWA,EAAqB,QAA6B,EAC7D,KAAMA,EAAqB,QAAwB,CACrD,CACF,CCKO,IAAMI,EAAWC,EAAqB","names":["thisVersionOrDefault","version","versionStr","getSupportedVersions","versions","getSupportedVersions"]}