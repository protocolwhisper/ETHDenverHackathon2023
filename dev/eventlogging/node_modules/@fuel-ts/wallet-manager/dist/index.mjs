var _=(a,e,t)=>{if(!e.has(a))throw TypeError("Cannot "+t)};var r=(a,e,t)=>(_(a,e,"read from private field"),t?t.call(a):e.get(a)),c=(a,e,t)=>{if(e.has(a))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(a):e.set(a,t)},i=(a,e,t,s)=>(_(a,e,"write to private field"),s?s.call(a,t):e.set(a,t),t);var k=(a,e,t)=>(_(a,e,"access private method"),t);import{encrypt as N,decrypt as R}from"@fuel-ts/keystore";import{EventEmitter as U}from"events";var O=class{constructor(){this.storage=new Map}async getItem(e){return this.storage.get(e)}async setItem(e,t){this.storage.set(e,t)}async removeItem(e){this.storage.delete(e)}async clear(){return this.storage.clear()}},x=O;import{Mnemonic as z}from"@fuel-ts/mnemonic";import{Wallet as b}from"@fuel-ts/wallet";var h,A=class{constructor(e){c(this,h,void 0);this.pathKey="{}";this.rootPath=`m/44'/1179993420'/${this.pathKey}'/0/0`;this.numberOfAccounts=0;i(this,h,e.secret||z.generate()),this.rootPath=e.rootPath||this.rootPath,this.numberOfAccounts=e.numberOfAccounts||1}getDerivePath(e){return this.rootPath.includes(this.pathKey)?this.rootPath.replace(this.pathKey,String(e)):`${this.rootPath}/${e}`}serialize(){return{secret:r(this,h),rootPath:this.rootPath,numberOfAccounts:this.numberOfAccounts}}getAccounts(){let e=[],t=0;do{let s=b.fromMnemonic(r(this,h),this.getDerivePath(t));e.push({publicKey:s.publicKey,address:s.address}),t+=1}while(t<this.numberOfAccounts);return e}addAccount(){this.numberOfAccounts+=1;let e=b.fromMnemonic(r(this,h),this.getDerivePath(this.numberOfAccounts-1));return{publicKey:e.publicKey,address:e.address}}exportAccount(e){let t=0;do{let s=b.fromMnemonic(r(this,h),this.getDerivePath(t));if(s.address.equals(e))return s.privateKey;t+=1}while(t<this.numberOfAccounts);throw new Error("Account not found")}getWallet(e){let t=this.exportAccount(e);return b.fromPrivateKey(t)}};h=new WeakMap,A.type="mnemonic";import{Wallet as v}from"@fuel-ts/wallet";var d,w=class{constructor(e){c(this,d,[]);e.secret?i(this,d,[e.secret]):i(this,d,e.accounts||[v.generate().privateKey])}serialize(){return{accounts:r(this,d)}}getPublicAccount(e){let t=v.fromPrivateKey(e);return{address:t.address,publicKey:t.publicKey}}getAccounts(){return r(this,d).map(this.getPublicAccount)}addAccount(){let e=v.generate();return r(this,d).push(e.privateKey),this.getPublicAccount(e.privateKey)}exportAccount(e){let t=r(this,d).find(s=>v.fromPrivateKey(s).address.equals(e));if(!t)throw new Error("Address not found");return t}getWallet(e){let t=this.exportAccount(e);return v.fromPrivateKey(t)}};d=new WeakMap,w.type="privateKey";var p={invalid_vault_type:"Invalid VaultType",address_not_found:"Address not found",vault_not_found:"Vault not found",wallet_not_unlocked:"Wallet is locked",passphrase_not_match:"Passphrase didn't match"};function m(a,e){if(!a)throw new Error(e)}var o,y,l,V,W,S,E,K=class extends U{constructor(t){super();c(this,V);c(this,S);this.storage=new x;this.STORAGE_KEY="WalletManager";c(this,o,[]);c(this,y,"");c(this,l,!0);this.storage=(t==null?void 0:t.storage)||this.storage}get isLocked(){return r(this,l)}exportVault(t){m(!r(this,l),p.wallet_not_unlocked);let s=r(this,o).find((n,u)=>u===t);return m(s,p.vault_not_found),s.vault.serialize()}getVaults(){return r(this,o).map((t,s)=>({title:t.title,type:t.type,vaultId:s}))}getAccounts(){return r(this,o).flatMap((t,s)=>t.vault.getAccounts().map(n=>({...n,vaultId:s})))}getWallet(t){let s=r(this,o).find(n=>n.vault.getAccounts().find(u=>u.address.equals(t)));return m(s,p.address_not_found),s.vault.getWallet(t)}exportPrivateKey(t){m(!r(this,l),p.wallet_not_unlocked);let s=r(this,o).find(n=>n.vault.getAccounts().find(u=>u.address.equals(t)));return m(s,p.address_not_found),s.vault.exportAccount(t)}async addAccount(t){await this.loadState();let s=r(this,o)[(t==null?void 0:t.vaultId)||0];await m(s,p.vault_not_found);let n=s.vault.addAccount();return await this.saveState(),n}async removeVault(t){r(this,o).splice(t,1),await this.saveState()}async addVault(t){await this.loadState();let s=this.getVaultClass(t.type),n=new s(t);i(this,o,r(this,o).concat({title:t.title,type:t.type,vault:n})),await this.saveState()}async lock(){i(this,l,!0),i(this,o,[]),i(this,y,""),this.emit("lock")}async unlock(t){i(this,y,t),i(this,l,!1);try{await this.loadState(),this.emit("unlock")}catch(s){throw await this.lock(),s}}async updatePassphrase(t,s){let n=r(this,l);await this.unlock(t),i(this,y,s),await this.saveState(),await this.loadState(),n&&await this.lock()}async loadState(){await m(!r(this,l),p.wallet_not_unlocked);let t=await this.storage.getItem(this.STORAGE_KEY);if(t){let s=await R(r(this,y),JSON.parse(t));i(this,o,k(this,S,E).call(this,s.vaults))}}async saveState(){await m(!r(this,l),p.wallet_not_unlocked);let t=await N(r(this,y),{vaults:k(this,V,W).call(this,r(this,o))});await this.storage.setItem(this.STORAGE_KEY,JSON.stringify(t)),this.emit("update")}getVaultClass(t){let s=K.Vaults.find(n=>n.type===t);return m(s,p.invalid_vault_type),s}},P=K;o=new WeakMap,y=new WeakMap,l=new WeakMap,V=new WeakSet,W=function(t){return t.map(({title:s,type:n,vault:u})=>({title:s,type:n,data:u.serialize()}))},S=new WeakSet,E=function(t){return t.map(({title:s,type:n,data:u})=>{let T=this.getVaultClass(n);return{title:s,type:n,vault:new T(u)}})},P.Vaults=[A,w];var M=class{constructor(e){throw new Error("Not implemented")}serialize(){throw new Error("Not implemented")}getAccounts(){throw new Error("Not implemented")}addAccount(){throw new Error("Not implemented")}exportAccount(e){throw new Error("Not implemented")}getWallet(e){throw new Error("Not implemented")}},I=class{};export{I as StorageAbstract,M as Vault,P as WalletManager};
//# sourceMappingURL=index.mjs.map