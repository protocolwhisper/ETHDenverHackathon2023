import { RequestMessage, CommunicationMessage, EventMessage, ResponseMessage, UIEventMessage, FuelProviderConfig, Asset, FuelEvents, FuelEventArg } from '@fuel-wallet/types';
export * from '@fuel-wallet/types';
import { TransactionRequestLike, Provider, TransactionResponse, WalletLocked, AbstractAddress, Address } from 'fuels';
import { JSONRPCClient, JSONRPCServer, JSONRPCRequest, JSONRPCResponse } from 'json-rpc-2.0';
import EventEmitter from 'events';

declare class BaseConnection extends EventEmitter {
    readonly client: JSONRPCClient;
    readonly server: JSONRPCServer;
    constructor();
    externalMethods(methods: Array<string | any>): void;
    sendRequest(request: JSONRPCRequest | null): Promise<void>;
    sendResponse(response: JSONRPCResponse | null, message: RequestMessage): void;
    onCommunicationMessage: (message: CommunicationMessage) => void;
    onEvent(message: EventMessage): void;
    onResponse(message: ResponseMessage): void;
    onRequest(message: RequestMessage): void;
    onUIEvent(message: UIEventMessage): void;
}

declare class WindowConnection extends BaseConnection {
    constructor();
    acceptMessage(message: MessageEvent<CommunicationMessage>): boolean;
    onMessage: (message: MessageEvent<CommunicationMessage>) => void;
    postMessage(message: CommunicationMessage, origin?: string): void;
}

declare class FuelWalletConnection extends WindowConnection {
    acceptMessage(message: MessageEvent<CommunicationMessage>): boolean;
    sendRequest(request: JSONRPCRequest | null): Promise<void>;
    ping(): Promise<boolean>;
    network(): Promise<FuelProviderConfig>;
    isConnected(): Promise<boolean>;
    connect(): Promise<boolean>;
    disconnect(): Promise<boolean>;
    accounts(): Promise<Array<string>>;
    currentAccount(): Promise<string>;
    signMessage(address: string, message: string): Promise<string>;
    sendTransaction(transaction: TransactionRequestLike & {
        signer?: string;
    }, providerConfig: FuelProviderConfig, signer?: string): Promise<string>;
    assets(): Promise<Array<Asset>>;
    addAsset(asset: Asset): Promise<boolean>;
    addAssets(assets: Asset[]): Promise<boolean>;
    on<E extends FuelEvents['type'], D extends FuelEventArg<E>>(eventName: E, listener: (data: D) => void): this;
}

declare class FuelWalletProvider extends Provider {
    walletConnection: FuelWalletConnection;
    constructor(providerUrl: string, walletConnection: FuelWalletConnection);
    sendTransaction(transactionRequestLike: TransactionRequestLike & {
        signer?: string;
    }): Promise<TransactionResponse>;
}

declare class FuelWalletLocked extends WalletLocked {
    provider: FuelWalletProvider;
    constructor(address: string | AbstractAddress, provider: FuelWalletProvider);
    signMessage(message: string): Promise<string>;
    sendTransaction(transaction: TransactionRequestLike): Promise<TransactionResponse>;
}

declare class Fuel extends FuelWalletConnection {
    readonly utils: {
        createAddress: (address: string) => Address;
    };
    readonly events: {
        readonly accounts: "accounts";
        readonly currentAccount: "currentAccount";
        readonly connection: "connection";
        readonly network: "network";
        readonly assets: "assets";
    };
    getProvider(): Promise<FuelWalletProvider>;
    getWallet(address: string | AbstractAddress): Promise<FuelWalletLocked>;
}
interface FuelDocumentEvents {
    FuelLoaded: CustomEvent<Fuel>;
}
declare global {
    interface Document {
        addEventListener<K extends keyof FuelDocumentEvents>(type: K, listener: (this: Document, ev: FuelDocumentEvents[K]) => void): void;
        dispatchEvent<K extends keyof FuelDocumentEvents>(ev: FuelDocumentEvents[K]): void;
    }
    interface Window {
        fuel: Fuel | undefined;
    }
}

declare const BLOCK_EXPLORER_URL = "https://fuellabs.github.io/block-explorer-v2/";
declare function getBlockExplorerLink({ path, providerUrl, }: {
    path: string;
    providerUrl?: string;
}): string;

declare const createReadOnly: (fuel: Fuel) => Fuel;

declare function createUUID(): string;

declare function getTransactionSigner(transaction: TransactionRequestLike): string;

declare function injectFuel(target: object): void;

declare class ContentProxyConnection {
    connection: chrome.runtime.Port;
    _tryReconect?: NodeJS.Timer;
    constructor();
    connect(): chrome.runtime.Port;
    onDisconnect: () => void;
    keepAlive: () => void;
    static start(): ContentProxyConnection;
    onMessageFromExtension: (message: CommunicationMessage) => void;
    onMessageFromWindow: (message: MessageEvent<CommunicationMessage>) => void;
    postMessage(message: CommunicationMessage): void;
}

declare class ExtensionPageConnection extends BaseConnection {
    readonly connection: chrome.runtime.Port;
    constructor();
    allowMessage(message: CommunicationMessage): boolean;
    sendResponse(response: JSONRPCResponse | null, message: RequestMessage): void;
    onResponseSent(): void;
    ready(): void;
    destroy(): void;
}

export { BLOCK_EXPLORER_URL, BaseConnection, ContentProxyConnection, ExtensionPageConnection, Fuel, FuelWalletConnection, FuelWalletLocked, FuelWalletProvider, WindowConnection, createReadOnly, createUUID, getBlockExplorerLink, getTransactionSigner, injectFuel };
