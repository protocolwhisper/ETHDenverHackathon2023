{"version":3,"sources":["../../types/src/accounts.ts","../../types/src/fuel.ts","../../types/src/constants.ts","../src/Fuel.ts","../src/FuelWalletConnection.ts","../src/connections/BaseConnection.ts","../src/config.ts","../src/connections/WindowConnection.ts","../src/utils/getTransactionSigner.ts","../src/FuelWalletLocked.ts","../src/FuelWalletProvider.ts","../src/utils/blockExplorer.ts","../src/utils/createReadOnly.ts","../src/utils/createUUID.ts","../src/utils/injectFuel.ts","../src/connections/ContentProxyConnection.ts","../src/connections/ExtensionPageConnection.ts"],"names":["AddressType","MessageTypes","Address"],"mappings":"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","sourcesContent":["import type { BigNumberish, BN } from 'fuels';\n\nimport type { Coin } from './coin';\n\nexport type Vault = {\n  key: string;\n  data: string;\n};\n\nexport type Account = {\n  name: string;\n  address: string;\n  vaultId?: number;\n  publicKey: string;\n  isHidden?: boolean;\n  balance?: BigNumberish | BN;\n  balanceSymbol?: string;\n  balances?: Coin[];\n  isCurrent?: boolean;\n};\n\nexport enum AddressType {\n  contract,\n  account,\n}\n","import type {\n  ICreateChange,\n  IUpdateChange,\n  IDeleteChange,\n} from 'dexie-observable/api';\nimport type { JSONRPCRequest, JSONRPCResponse } from 'json-rpc-2.0';\n\nimport type { Asset } from './asset';\nimport type { Network } from './network';\n\nexport const FuelWalletEvents = {\n  accounts: 'accounts',\n  currentAccount: 'currentAccount',\n  connection: 'connection',\n  network: 'network',\n  assets: 'assets',\n} as const;\n\nexport type FuelEvents =\n  | {\n      type: typeof FuelWalletEvents.accounts;\n      data: Array<string>;\n    }\n  | {\n      type: typeof FuelWalletEvents.currentAccount;\n      data: string;\n    }\n  | {\n      type: typeof FuelWalletEvents.connection;\n      data: boolean;\n    }\n  | {\n      type: typeof FuelWalletEvents.network;\n      data: Network;\n    }\n  | {\n      type: typeof FuelWalletEvents.assets;\n      data: Array<Asset>;\n    };\n\nexport type FuelEventArg<T extends FuelEvents['type']> = Extract<\n  FuelEvents,\n  { type: T }\n>['data'];\n\nexport enum MessageTypes {\n  ping = 'ping',\n  uiEvent = 'uiEvent',\n  event = 'event',\n  request = 'request',\n  response = 'response',\n  removeConnection = 'removeConnection',\n}\n\nexport type BaseEvent<T> = {\n  readonly target: string;\n  readonly id?: string;\n  readonly sender?: chrome.runtime.Port['sender'];\n} & T;\n\nexport type UIEventMessage = BaseEvent<{\n  readonly type: MessageTypes.uiEvent;\n  readonly ready: boolean;\n  readonly session: string;\n}>;\n\nexport type RequestMessage = BaseEvent<{\n  readonly type: MessageTypes.request;\n  readonly request: JSONRPCRequest;\n}>;\n\nexport type ResponseMessage = BaseEvent<{\n  readonly type: MessageTypes.response;\n  readonly response: JSONRPCResponse;\n}>;\n\nexport type EventMessageEvents = Array<{\n  event: string;\n  params: Array<unknown>;\n}>;\n\nexport type EventMessage<T = EventMessageEvents> = BaseEvent<{\n  readonly type: MessageTypes.event;\n  readonly events: T;\n}>;\n\nexport type CommunicationEventArg<T> = T extends MessageTypes.request\n  ? RequestMessage\n  : T extends MessageTypes.response\n  ? ResponseMessage\n  : T extends MessageTypes.uiEvent\n  ? UIEventMessage\n  : T extends MessageTypes.event\n  ? EventMessage\n  : T extends MessageTypes.removeConnection\n  ? string\n  : unknown;\n\nexport type CommunicationMessage =\n  | UIEventMessage\n  | RequestMessage\n  | ResponseMessage\n  | EventMessage;\n\nexport type DatabaseEvents = ['delete', 'create', 'update'];\nexport type DatabaseObservableEvent<T extends Array<string>> =\n  `${T[number]}:${DatabaseEvents[number]}`;\n\nexport type DatabaseEventArg<T extends string> = T extends `${string}:create`\n  ? ICreateChange\n  : T extends `${string}:update`\n  ? IUpdateChange\n  : T extends `${string}:delete`\n  ? IDeleteChange\n  : unknown;\n\nexport type FuelProviderConfig = {\n  id?: string;\n  url: string;\n};\n","export const PAGE_SCRIPT_NAME = 'Fuel';\nexport const CONTENT_SCRIPT_NAME = 'FuelContentScript';\nexport const BACKGROUND_SCRIPT_NAME = 'FuelBackgroundScript';\nexport const POPUP_SCRIPT_NAME = 'FuelPopUpScript';\nexport const VAULT_SCRIPT_NAME = 'FuelVaultScript';\nexport const EVENT_MESSAGE = 'message';\n","import { FuelWalletEvents } from '@fuel-wallet/types';\nimport { Address } from 'fuels';\nimport type { AbstractAddress } from 'fuels';\n\nimport { FuelWalletConnection } from './FuelWalletConnection';\nimport { FuelWalletLocked } from './FuelWalletLocked';\nimport { FuelWalletProvider } from './FuelWalletProvider';\n\n// Isolate the provider instance to prevent\n// developers from replacing the provider\n// instance with a new one\nconst FuelWeb3Privates: {\n  provider?: FuelWalletProvider;\n} = {};\n\nexport class Fuel extends FuelWalletConnection {\n  readonly utils = {\n    // TODO: remove createAddress once fuels-ts replace input\n    // class address with string. The warn message is to avoid\n    // developers to use this method.\n    createAddress: (address: string) => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Do not use this method! It will be removed in the next release.'\n      );\n      return Address.fromString(address);\n    },\n  };\n\n  // Externalize events names\n  readonly events = FuelWalletEvents;\n\n  async getProvider(): Promise<FuelWalletProvider> {\n    // TODO: This solution should be improved by issue #506\n    // by moving all connection throw events\n    const providerConfig = await this.network();\n    // Return the current provider instance if it exists\n    if (FuelWeb3Privates.provider) {\n      return FuelWeb3Privates.provider;\n    }\n    // Otherwise, create a new provider instance\n    // fetch the current network and connect the provider\n    const provider = new FuelWalletProvider(providerConfig.url, this);\n    FuelWeb3Privates.provider = provider;\n\n    // Listen for network changes and connect the provider\n    // selected network from the user\n    this.on(FuelWalletEvents.network, async (network) => {\n      FuelWeb3Privates.provider?.connect(network.url);\n    });\n\n    return FuelWeb3Privates.provider;\n  }\n\n  async getWallet(\n    address: string | AbstractAddress\n  ): Promise<FuelWalletLocked> {\n    const provider = await this.getProvider();\n    return new FuelWalletLocked(address, provider);\n  }\n}\n\ninterface FuelDocumentEvents {\n  FuelLoaded: CustomEvent<Fuel>;\n}\ndeclare global {\n  interface Document {\n    addEventListener<K extends keyof FuelDocumentEvents>(\n      type: K,\n      listener: (this: Document, ev: FuelDocumentEvents[K]) => void\n    ): void;\n    dispatchEvent<K extends keyof FuelDocumentEvents>(\n      ev: FuelDocumentEvents[K]\n    ): void;\n  }\n  interface Window {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    fuel: Fuel | undefined;\n  }\n}\n","import {\n  CONTENT_SCRIPT_NAME,\n  PAGE_SCRIPT_NAME,\n  MessageTypes,\n} from '@fuel-wallet/types';\nimport type {\n  Asset,\n  CommunicationMessage,\n  FuelEventArg,\n  FuelProviderConfig,\n  FuelEvents,\n} from '@fuel-wallet/types';\nimport type { TransactionRequestLike } from 'fuels';\nimport { transactionRequestify } from 'fuels';\nimport type { JSONRPCRequest } from 'json-rpc-2.0';\n\nimport { WindowConnection } from './connections/WindowConnection';\nimport { getTransactionSigner } from './utils/getTransactionSigner';\n\nexport class FuelWalletConnection extends WindowConnection {\n  acceptMessage(message: MessageEvent<CommunicationMessage>): boolean {\n    const { data: event } = message;\n    return (\n      message.origin === window.origin && event.target === PAGE_SCRIPT_NAME\n    );\n  }\n\n  async sendRequest(request: JSONRPCRequest | null) {\n    if (request) {\n      this.postMessage({\n        type: MessageTypes.request,\n        target: CONTENT_SCRIPT_NAME,\n        request,\n      });\n    }\n  }\n\n  async ping(): Promise<boolean> {\n    return this.client.timeout(1000).request('ping', {});\n  }\n\n  async network(): Promise<FuelProviderConfig> {\n    return this.client.request('network', {});\n  }\n\n  async isConnected(): Promise<boolean> {\n    return this.client.request('isConnected', {});\n  }\n\n  async connect(): Promise<boolean> {\n    return this.client.request('connect', {});\n  }\n\n  async disconnect(): Promise<boolean> {\n    return this.client.request('disconnect', {});\n  }\n\n  async accounts(): Promise<Array<string>> {\n    return this.client.request('accounts', {});\n  }\n\n  async currentAccount(): Promise<string> {\n    return this.client.request('currentAccount', {});\n  }\n\n  async signMessage(address: string, message: string): Promise<string> {\n    if (!message.trim()) {\n      throw new Error('Message is required');\n    }\n    return this.client.request('signMessage', {\n      address,\n      message,\n    });\n  }\n\n  async sendTransaction(\n    transaction: TransactionRequestLike & { signer?: string },\n    providerConfig: FuelProviderConfig,\n    signer?: string\n  ): Promise<string> {\n    if (!transaction) {\n      throw new Error('Transaction is required');\n    }\n    // Transform transaction object to a transaction request\n    const txRequest = transactionRequestify(transaction);\n\n    const address =\n      signer || transaction.signer || getTransactionSigner(txRequest);\n\n    return this.client.request('sendTransaction', {\n      address,\n      provider: providerConfig,\n      transaction: JSON.stringify(txRequest),\n    });\n  }\n\n  async assets(): Promise<Array<Asset>> {\n    return this.client.request('assets', {});\n  }\n\n  async addAsset(asset: Asset): Promise<boolean> {\n    return this.addAssets([asset]);\n  }\n\n  async addAssets(assets: Asset[]): Promise<boolean> {\n    return this.client.request('addAssets', {\n      assets,\n    });\n  }\n\n  on<E extends FuelEvents['type'], D extends FuelEventArg<E>>(\n    eventName: E,\n    listener: (data: D) => void\n  ): this {\n    return super.on(eventName, listener);\n  }\n}\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type {\n  CommunicationMessage,\n  EventMessage,\n  RequestMessage,\n  ResponseMessage,\n  UIEventMessage,\n} from '@fuel-wallet/types';\nimport { MessageTypes } from '@fuel-wallet/types';\nimport EventEmitter from 'events';\nimport type { JSONRPCRequest, JSONRPCResponse } from 'json-rpc-2.0';\nimport { JSONRPCServer, JSONRPCClient } from 'json-rpc-2.0';\n\nimport { MAX_EVENT_LISTENERS } from '../config';\n\nexport class BaseConnection extends EventEmitter {\n  readonly client: JSONRPCClient;\n  readonly server: JSONRPCServer;\n\n  constructor() {\n    super();\n    this.setMaxListeners(MAX_EVENT_LISTENERS);\n    this.client = new JSONRPCClient(this.sendRequest.bind(this));\n    this.server = new JSONRPCServer();\n  }\n\n  externalMethods(methods: Array<string | any>) {\n    methods.forEach((method) => {\n      let methodName = method;\n      if (method.name) {\n        methodName = method.name;\n      }\n      this.server.addMethod(methodName, this[methodName].bind(this) as any);\n    });\n  }\n\n  async sendRequest(request: JSONRPCRequest | null): Promise<void> {\n    throw new Error('Send request not implemented');\n  }\n\n  sendResponse(\n    response: JSONRPCResponse | null,\n    message: RequestMessage\n  ): void {\n    throw new Error('Send response not implemented');\n  }\n\n  onCommunicationMessage = (message: CommunicationMessage) => {\n    switch (message.type) {\n      case MessageTypes.response:\n        this.onResponse(message);\n        break;\n      case MessageTypes.request:\n        this.onRequest(message);\n        break;\n      case MessageTypes.event:\n        this.onEvent(message);\n        break;\n      case MessageTypes.uiEvent:\n        this.onUIEvent(message);\n        break;\n      default:\n    }\n  };\n\n  onEvent(message: EventMessage): void {\n    message.events.forEach((eventData) => {\n      this.emit(eventData.event, ...eventData.params);\n    });\n  }\n\n  onResponse(message: ResponseMessage): void {\n    this.client.receive(message.response);\n  }\n\n  onRequest(message: RequestMessage): void {\n    this.server.receive(message.request).then((response) => {\n      this.sendResponse(response, message);\n    });\n  }\n\n  onUIEvent(message: UIEventMessage): void {}\n}\n","export const MAX_EVENT_LISTENERS = 30;\nexport const PING_TIMEOUT = 1000;\nexport const RECONNECT_TIMEOUT = 300;\n","/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { EVENT_MESSAGE } from '@fuel-wallet/types';\nimport type { CommunicationMessage } from '@fuel-wallet/types';\n\nimport { BaseConnection } from './BaseConnection';\n\nexport class WindowConnection extends BaseConnection {\n  constructor() {\n    super();\n    window.addEventListener(EVENT_MESSAGE, this.onMessage.bind(this));\n  }\n\n  acceptMessage(message: MessageEvent<CommunicationMessage>) {\n    return true;\n  }\n\n  onMessage = (message: MessageEvent<CommunicationMessage>) => {\n    const messageFroze = Object.freeze(message);\n    if (!this.acceptMessage(messageFroze)) return;\n    const { data: event } = messageFroze;\n    this.onCommunicationMessage(event);\n  };\n\n  postMessage(message: CommunicationMessage, origin?: string) {\n    window.postMessage(message, origin || window.origin);\n  }\n}\n","import type { TransactionRequestLike } from 'fuels';\nimport { hexlify, Address, InputType } from 'fuels';\n\nexport function getTransactionSigner(transaction: TransactionRequestLike) {\n  const address = transaction.inputs?.map((i) => {\n    switch (i.type) {\n      case InputType.Message:\n        return i.recipient;\n      case InputType.Coin:\n        return i.owner;\n      default:\n        return undefined;\n    }\n  })[0];\n\n  if (!address) {\n    throw new Error('No possible signer found!');\n  }\n\n  return Address.fromB256(hexlify(address)).toString();\n}\n","import type {\n  AbstractAddress,\n  TransactionRequestLike,\n  TransactionResponse,\n} from 'fuels';\nimport { WalletLocked } from 'fuels';\n\nimport type { FuelWalletProvider } from './FuelWalletProvider';\n\nexport class FuelWalletLocked extends WalletLocked {\n  provider: FuelWalletProvider;\n\n  constructor(address: string | AbstractAddress, provider: FuelWalletProvider) {\n    super(address, provider);\n    this.provider = provider;\n  }\n\n  async signMessage(message: string): Promise<string> {\n    return this.provider.walletConnection.signMessage(\n      this.address.toString(),\n      message\n    );\n  }\n\n  async sendTransaction(\n    transaction: TransactionRequestLike\n  ): Promise<TransactionResponse> {\n    return this.provider.sendTransaction({\n      ...transaction,\n      signer: this.address.toString(),\n    });\n  }\n}\n","import type { TransactionRequestLike } from 'fuels';\nimport { TransactionResponse, Provider } from 'fuels';\n\nimport type { FuelWalletConnection } from './FuelWalletConnection';\n\nexport class FuelWalletProvider extends Provider {\n  walletConnection: FuelWalletConnection;\n\n  constructor(providerUrl: string, walletConnection: FuelWalletConnection) {\n    super(providerUrl);\n    this.walletConnection = walletConnection;\n  }\n\n  async sendTransaction(\n    transactionRequestLike: TransactionRequestLike & { signer?: string }\n  ): Promise<TransactionResponse> {\n    const transactionId = await this.walletConnection.sendTransaction(\n      transactionRequestLike,\n      { url: this.url }\n    );\n    const response = new TransactionResponse(transactionId, this);\n    return response;\n  }\n}\n","export const BLOCK_EXPLORER_URL =\n  'https://fuellabs.github.io/block-explorer-v2/';\n\nexport function getBlockExplorerLink({\n  path,\n  providerUrl,\n}: {\n  path: string;\n  providerUrl?: string;\n}) {\n  return `${BLOCK_EXPLORER_URL}${path}${\n    providerUrl ? `?providerUrl=${encodeURIComponent(providerUrl)}` : ''\n  }`;\n}\n","import type { Fuel } from '../Fuel';\n\nexport const createReadOnly = (fuel: Fuel) => {\n  return new Proxy(fuel, {\n    get(target, prop) {\n      return target[prop];\n    },\n    set(target, key, value) {\n      // Avoid change keys of Fuel, except _eventsCount and _events\n      // This keys are constantly updated by the EventEmitter witch Fuel\n      // extends from.\n      if (\n        Object.hasOwn(target, key) &&\n        ['_eventsCount', '_events'].includes(key as string)\n      ) {\n        // eslint-disable-next-line no-param-reassign\n        target[key] = value;\n        return true;\n      }\n      return false;\n    },\n    defineProperty(target, key) {\n      if (Object.hasOwn(target, key)) return target[key];\n      return false;\n    },\n    deleteProperty() {\n      return false;\n    },\n  });\n};\n","import { v4 } from 'uuid';\n\nexport function createUUID() {\n  return v4();\n}\n","import { Fuel } from '../Fuel';\n\nimport { createReadOnly } from './createReadOnly';\n\nexport function injectFuel(target: object) {\n  const fuel = createReadOnly(new Fuel());\n  Object.defineProperty(target, 'fuel', {\n    value: fuel,\n    writable: false,\n    enumerable: true,\n    configurable: true,\n  });\n\n  if (typeof document !== 'undefined') {\n    // Dispatch event fuel loaded into the document\n    const fuelLoadedEvent = new CustomEvent('FuelLoaded', {\n      detail: fuel,\n    });\n    document.dispatchEvent(fuelLoadedEvent);\n  }\n}\n","/* eslint-disable no-console */\nimport {\n  PAGE_SCRIPT_NAME,\n  BACKGROUND_SCRIPT_NAME,\n  CONTENT_SCRIPT_NAME,\n  EVENT_MESSAGE,\n  MessageTypes,\n} from '@fuel-wallet/types';\nimport type { CommunicationMessage } from '@fuel-wallet/types';\n\nimport { PING_TIMEOUT, RECONNECT_TIMEOUT } from '../config';\n\nexport class ContentProxyConnection {\n  connection: chrome.runtime.Port;\n  _tryReconect?: NodeJS.Timer;\n\n  constructor() {\n    this.connection = this.connect();\n    window.addEventListener(EVENT_MESSAGE, this.onMessageFromWindow);\n    this.keepAlive();\n  }\n\n  connect() {\n    const connection = chrome.runtime.connect(chrome.runtime.id, {\n      name: BACKGROUND_SCRIPT_NAME,\n    });\n    connection.onMessage.addListener(this.onMessageFromExtension);\n    connection.onDisconnect.addListener(this.onDisconnect);\n    return connection;\n  }\n\n  onDisconnect = () => {\n    clearInterval(this._tryReconect);\n    this._tryReconect = setInterval(() => {\n      console.debug('[FUEL WALLET] reconnecting!');\n      try {\n        this.connection = this.connect();\n        console.debug('[FUEL WALLET] reconnected!');\n        clearInterval(this._tryReconect);\n        // If fails it will try to reconnect\n        // It should not throw an error to avoid\n        // uncessary error reporting as it is expected\n        // to fail if background script is not available.\n      } catch (err: unknown) {\n        if ((err as Error).message === 'Extension context invalidated.') {\n          clearInterval(this._tryReconect);\n          console.debug('[FUEL WALLET] context invalidated!');\n        }\n      }\n    }, RECONNECT_TIMEOUT);\n  };\n\n  keepAlive = () => {\n    // Send ping message to background script\n    // If background script is not available,\n    // it will throw an error and we will try to reconnect.\n    try {\n      this.connection.postMessage({\n        target: BACKGROUND_SCRIPT_NAME,\n        type: MessageTypes.ping,\n      });\n      setTimeout(this.keepAlive, PING_TIMEOUT);\n    } catch (err) {\n      this.onDisconnect();\n    }\n  };\n\n  static start() {\n    return new ContentProxyConnection();\n  }\n\n  onMessageFromExtension = (message: CommunicationMessage) => {\n    const shouldAcceptMessage = message.target === CONTENT_SCRIPT_NAME;\n    if (shouldAcceptMessage) {\n      this.postMessage(message);\n    }\n  };\n\n  onMessageFromWindow = (message: MessageEvent<CommunicationMessage>) => {\n    const { data: event, origin } = Object.freeze(message);\n    const shouldAcceptMessage =\n      origin === window.location.origin && event.target === CONTENT_SCRIPT_NAME;\n    if (shouldAcceptMessage) {\n      this.connection.postMessage({\n        ...event,\n        target: BACKGROUND_SCRIPT_NAME,\n      });\n    }\n  };\n\n  postMessage(message: CommunicationMessage) {\n    const postMessage = {\n      ...message,\n      target: PAGE_SCRIPT_NAME,\n    };\n    window.postMessage(postMessage, window.location.origin);\n  }\n}\n","import type {\n  CommunicationMessage,\n  RequestMessage,\n  ResponseMessage,\n} from '@fuel-wallet/types';\nimport {\n  BACKGROUND_SCRIPT_NAME,\n  POPUP_SCRIPT_NAME,\n  MessageTypes,\n} from '@fuel-wallet/types';\nimport type { JSONRPCResponse } from 'json-rpc-2.0';\n\nimport { BaseConnection } from './BaseConnection';\n\nexport class ExtensionPageConnection extends BaseConnection {\n  readonly connection: chrome.runtime.Port;\n\n  constructor() {\n    super();\n    this.connection = chrome.runtime.connect(chrome.runtime.id, {\n      name: BACKGROUND_SCRIPT_NAME,\n    });\n    this.connection.onMessage.addListener(this.onCommunicationMessage);\n    this.ready();\n  }\n\n  allowMessage(message: CommunicationMessage): boolean {\n    return message.target === POPUP_SCRIPT_NAME;\n  }\n\n  sendResponse(response: JSONRPCResponse | null, message: RequestMessage) {\n    if (!response) return;\n    const responseMessage: ResponseMessage = {\n      id: message.id,\n      target: BACKGROUND_SCRIPT_NAME,\n      type: MessageTypes.response,\n      response,\n    };\n    this.connection.postMessage(responseMessage);\n    this.onResponseSent();\n  }\n\n  onResponseSent() {\n    window.close();\n  }\n\n  ready() {\n    // Get session from query params\n    const session = new URLSearchParams(window.location.search).get('s');\n    this.connection.postMessage({\n      target: BACKGROUND_SCRIPT_NAME,\n      type: MessageTypes.uiEvent,\n      ready: true,\n      session,\n    });\n  }\n\n  destroy() {\n    this.connection.disconnect();\n  }\n}\n"]}